multcompLetters=list(fig=c(0.8,0.9,0.03,0.98),fontsize=20)))
```
posthoc<-regwqComp(x~g)
posthoc
?dunn.test
install.packages('FSA')
install.packages('dunn.test')
x
dunn.test(x,g)
require(dunn.test)
dunn.test(x,g)
dunn.test(x,g,method='holm')
xx <- (rexp(20),rexp(20)+.5,rexp(20)+1,rexp(20)+1.5)
xx <- c(rexp(20),rexp(20)+.5,rexp(20)+1,rexp(20)+1.5)
xx
dunn.test(xx,g,method='holm')
boxplot(x~g)
xx <- c(rexp(20),rexp(20)+.5,rexp(20)+1,rexp(20)+1.5)
xx <- rlnorm(80); xx <- (xx-mean(xx))/sd(xx); xx <- xx + rep(c(0,.5,1,1.5),each=20)
boxplot(xx,g)
g
xx
boxplot(xx~g)
set.seed(4321)
xx <- rlnorm(80); xx <- (xx-mean(xx))/sd(xx); xx <- xx + rep(c(0,.5,1,1.5),each=20)
boxplot(xx~g)
set.seed(1234)
xx <- rlnorm(80); xx <- (xx-mean(xx))/sd(xx); xx <- xx + rep(c(0,.5,1,1.5),each=20)
boxplot(xx~g)
dunn.test(xx,g)
xx <- rlnorm(80); xx <- (xx-mean(xx))/sd(xx); xx <- xx + rep(c(0,.25,.5,.75),each=20)
dunn.test(xx,g)
dunn.test(xx,g,method='holm')
A <- c(68,93,113,83,108,112)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,79,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(78,93,113,83,91,112)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,79,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(78,93,113,83,91,100)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,79,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(78,93,113,83,91,100)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,79,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(78,93,113,83,91,100)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,79,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
round( 1-rexp(6))
round( (1-rexp(6))*100)
round( (1-rexp(6))*50)
round( (1-rexp(6))*50)+80
round( (1-rexp(6))*50)+50
round( (1-rexp(6))*25)+50
round( (1-rexp(6))*25)+90
round( (1-rexp(6))*25)+90
round( (1-rexp(6))*25)+90
round( (1-rexp(6))*25)+90
round( (1-rexp(6))*25)+90
round( (1-rexp(6))*25)+90
x <- round( (1-rexp(24))*25)+90
g <- factor(rep(LETTERS[1:4],each=6))
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
x <- round( (1-rexp(24))*25)+90
boxplot(x~g)
A <- c(68,93,123,83,108,122)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
?kruskal.test
kruskal.test(rainfall~city,data=weather)
dunn.test(rainfall~city,data=weather)
dunn.test(weather$rainfall,weather$city,method='holm')
A <- c(68,93,123,83,108,122)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
B
median(A)
median(B)
A = B-8
A
A <- c(76,105,93,95,108,111)
B <- c(119,116,101,103,113,84)
C <- c(70,68,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
sort(C)
A <- c(76,105,93,95,108,111)
B <- c(119,116,101,103,113,84)
C <- c(70,60,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(76,105,93,95,108,111)
B <- c(119,116,101,103,113,84)
C <- c(70,64,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
A <- c(76,105,93,95,108,111)
B <- c(119,116,101,103,113,84)
C <- c(70,64,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
rainfall <- weather$rainfall; city <- weather$city
boxplot(rainfall~city)
A <- c(76,105,93,95,108,111)
B <- c(119,116,101,103,113,84)
C <- c(70,64,54,73,81,68)
D <- c(61,54,59,67,59,70)
weather <- stack(list('A'=A,'B'=B,'C'=C,'D'=D))
names(weather) <- c('rainfall','city')
boxplot(rainfall~city,data=weather)
dunn.test(rainfall,city,method='holm')
dunn.test(rainfall,city,method='non')
dunn.test(rainfall,city,method='none')
dunn.test(rainfall,city,method='holm')
?dunn.test
dunn.test(rainfall,city,method='bonferroni')
require(dunn.test)
require(utils)
tmp <- noquote(
capture.output(
dunn.test(rainfall,city,method='holm')
)
)
write.table(tmp[1:6],quote=F,row.names=F,col.names=F)
tmp
require(boot)
x <- c(2,7,7,8,11,13,15,33) # the original sample
set.seed(NULL); boot.object <- boot(x,bootMedian,R=5000)
par(mar=c(4.5,0,0,0))
hist(boot.object$t,breaks=40,main='t',xlab='sample median',yaxt='n')
boot.ojject
x <- c(2,7,7,8,11,13,15,33) # the original sample
set.seed(NULL); boot.object <- boot(x,bootMedian,R=5000)
bootMedian <- function( x, i){
# x is a vector of data
# i is a vector of indices for the resampled
#   elements of x
median(x[i]) # gets returned
}
set.seed(NULL); boot.object <- boot(x,bootMedian,R=5000)
par(mar=c(4.5,0,0,0))
hist(boot.object$t,breaks=40,main='t',xlab='sample median',yaxt='n')
plot(boot.object)
summary(boot.object)
boot.ci(boot.object)
abc.ci(boot.object)
?abc.ci
bootTrMean <- function( x, i, trim=0){
mean(x[i],tr=trim) # gets returned
}
set.seed(43);
x <- rlnorm(50); # very skewed distribution
boot.object <- boot(x,bootTrMean,R=5000,trim=0.2)
boot.ci(boot.object,type='bca')
bootVar <- function( x, i){
var(x[i]) # gets returned
}
x <- rnorm(40,mean=10,sd=5)
boot.object <- boot(x,bootVar,R=5000)
boot.ci(boot.object,type='bca')
bootMeanDiff <- function(d,i){
# d is a dataframe, d[,1] is data, d[,2] is group factor variable
# d[i,1] is resampled data
print(d[i,1])
means <- tapply(d[i,1],d[,2],mean)
means[1]-means[2]
}
x <- c(1.1, 1.3, 1.4, 1.8, 2.2, 2.5, 2.6, 2.7)
group <- factor(rep(c('A','B'),c(4,4)))
d <- data.frame(x,group)
boot.object <- boot(d, bootMeanDiff, R = 5, strata = d$group )
source('~/Dropbox/Gdrive_snap_May_15 symlink/ds705 - resources (1)/class_scripts/confBands.R')
source('~/Dropbox/Gdrive_snap_May_15 symlink/ds705 - resources (1)/class_scripts/confBands.R')
source('~/Dropbox/Gdrive_snap_May_15 symlink/ds705 - resources (1)/class_scripts/confBands.R')
source('~/Dropbox/Gdrive_snap_May_15 symlink/ds705 - resources (1)/class_scripts/confBands.R')
source('~/Dropbox/Gdrive_snap_May_15 symlink/ds705 - resources (1)/class_scripts/confBands.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
plot(x1,y)
plot(x2,y)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
mod2
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
mod2
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod1
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod1
mod
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
anonva(mod)
anova(mod)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
mod
anova(mod)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
modg
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
modg
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
modg
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
modg
modgi
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/multRegTest.R')
modg
modgi
swirl()
require(swirl)
swirl()
skip()
skip()
exit()
skip()
swirl()
install_from_swirl("Regression Models")
install_from_swirl("Regression_Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(chiild~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
equality(rhs,lhs)
all.equal(rhs,lhs)
skip()
var(fit$residuals) -> varRes
varEst <- var(est(ols.slope,ols.ic))
all.equal(varRes,varEst
)
skip()
info()
bye()
bye()
main()
bye()
x <- rnorm(20)
y <- x + .5*rnorm(20)
mod <- lm(y~x)
fit(mod)
?fit
summary(mod)
str(mod)
plot(mod$model$x,mod$model$y)
plot(mod$model$x,mod$fittedvalues)
y
plot(mod$model$x,mod$fittedvalues-mod$residuals)
plot(mod$model$x,mod$fittedvalues-mod$residuals)
mod$model$x
mod$fittedvalues
str(mod)
mod$fitted.values
plot(mod$model$x,mod$fitted.values-mod$residuals)
plot(mod$model$x,mod$fitted.values+mod$residuals)
plot(mod$model$x,-(mod$residuals-mod$fitted.values))
plot(mod$model$x,-(mod$residuals-y))
y
mod$fitted.values
plot(x,mod$fitted.values)
plot(mod$model$x,mod$fitted.values)
var(y)
var(mod.residuals)
var(mod$residuals)
var(mod$fitted.values)
plot(mod)
reduced <- lm(y~x)
reduced
full <- lm(y~0+as.factor(x))
full
anova(reduced,full)
require(shiny)
require(plotrix)
?shinyGist
??gist
shinyrunGist(5791259)
runGist(5791259)
runGist(5791259)
shiny::runApp('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/shinyReg')
data(MLB)
?
data(mlb11)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/lackFitOtt.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/lackFitOtt.R')
mod
summary(mod)
anova(mod)
y
y[6]<-75
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/lackFitOtt.R')
mod
anova(mod)
y
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/lackFitOtt.R')
mod
anova(mod)
summary(mod)
plot(mod)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/lackFitOtt.R')
anova(mod2)
anova(mod,mod2)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
mlb11
head(mlb11)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
beta0hat
?predict.lm
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
ynew
?predict.lm
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
head(mlb11)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
print(unname(newy))
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
mlb11$team <- NULL
y <- mlb11$runs
x <- mlb11$bat_avg
# (1) make a scatterplot
plot(x,y)
# (2) get the model
mod <- lm(y~x)
summary(mod)
# (3) add line to plot
abline(mod)
# (4) find predicted value for a given x
newx <- data.frame(x=.27) # new data frame win one new x value
newy <- predict.lm(mod,newx)
# (5) confidence and prediction intervals for a given x
(newy <- predict.lm(mod,newx))
# (5) confidence and prediction intervals for a given x
predict.lm(mod,newx,interval="confidence") # estimate the mean
predict.lm(mod,newx,interval="prediction") # predicition interval
?predict.lm
fits
predict.lm(mod)
predict.lm(mod,newx,interval="confidence") # estimate the mean
predict.lm(mod,newx,interval="prediction") # predicition interval
# give intervals for all of the original values of x
predict.lm(mod,interval="confidence")
xpts <- seq(min(x),max(x),200)
fittedC <- predict.lm(mod,xpts,interval="confidence")
fittedC
xpts <- data.frame(x=seq(min(x),max(x),200))
fittedC <- predict.lm(mod,xpts,interval="confidence")
fittedP <- predict.lm(mod,xpts,interval="prediction")
fittedC
xpts
xpts <- data.frame(x=seq(min(x),max(x),length=200))
fittedC <- predict.lm(mod,xpts,interval="confidence")
fittedP <- predict.lm(mod,xpts,interval="prediction")
xpts
fittedC
xpts <- data.frame(x=seq(min(x),max(x),length=200))
fittedC <- predict.lm(mod,xpts,interval="confidence")
fittedP <- predict.lm(mod,xpts,interval="prediction")
# now the confidence bands
lines(xpts, fittedC[, "lwr"], lty = "dashed")
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
ylimits <- c(min(fittedP[,"lwr"]),max(fittedP[,"upr"]))
plot(x,y,ylim=ylimits)
source('~/Google Drive/Gdrive_snap_May_15/DS705 - Resources/class_scripts/regressionStudy.R')
fits <- mod$fitted
# extract the residuals
resids <- mod$residuals
plot(resids,fits)
title(xlab="fitted values",ylab="residuals")
abline( h=0, lty="dotted")
?abline
plot(resids,fits, xlab="fitted values",ylab="residuals" )
abline(0)
abline(h=0)
resids <- mod$residuals
plot(fits,resids, xlab="fitted values",ylab="residuals" )
abline(h=0,lty="dotted")
require(lmtest)
head(mlb11)
plot(x,y)
##### (2) get the model
mod <- lm(y~x)
summary(mod)
# extract coefficients if needed
(beta0hat <- mod$coeff[1]) # estimated intercept
(beta1hat <- mod$coeff[2]) # estimated slope
##### (3) add line to plot
abline(mod)
##### (4) find predicted value for a given x
newx <- data.frame(x=.27) # new data frame win one new x value
(newy <- predict.lm(mod,newx))
##### (5) confidence and prediction intervals for a given x
predict.lm(mod,newx,interval="confidence") # estimate the mean
predict.lm(mod,newx,interval="prediction") # predicition interval
# give intervals for all of the original values of x
#     this is just too much info to be useful, but next we'll
#     make plots
predict.lm(mod,interval="confidence")
predict.lm(mod,interval="prediction")
##### (6) making plots
# choose x-coordinates for plotting and put them in a dataframe
xpts <- seq(min(x),max(x),length=200)
xptsdf <- data.frame(x=xpts) # predict.lm requires a dataframe
fittedC <- predict.lm(mod,xptsdf,interval="confidence")
fittedP <- predict.lm(mod,xptsdf,interval="prediction")
# replot the data and fitted line with enough room for
# the prediction bands
ylimits <- c(min(fittedP[,"lwr"]),max(fittedP[,"upr"]))
plot(x,y,ylim=ylimits)
abline(mod)
# plot the confidence bands
lines(xpts, fittedC[, "lwr"], lty = "dashed")
lines(xpts, fittedC[, "upr"], lty = "dashed")
# plot the prediction bounds
lines(xpts, fittedP[, "lwr"], lty = "dotted")
lines(xpts, fittedP[, "upr"], lty = "dotted")
?rcor
?cor
cor(x,y)
cor(x,y)^2
rcorr(x,y)
require(Hmisc)
xymat <- cbind(x,y)
if(!require(Hmisc)){install.packages('Hmisc')}
rcorr(xymatrix,type="pearson")
rcorr(xymat,type="pearson")
rcorr(xymat,type="spearman")
cor.text(x,y)
cor.test(x,y)
cor.test(x,y,method="spearman")
cor.test(x,y,method="kendal")
cor.test(x,y) # pearson by default, note this gives CI also
cor.test(x,y,method='spearman')
cor.test(x,y,method='kendall')
str(mod)
str(summary(mod))
if(!require(lmtest)){install.packages('lmtest')}
bptest(mod)
confint(mod)
